{"version":3,"sources":["logo.svg","components/todoTask/dragEndResult.js","context/taskContext.js","components/todoTask/task.jsx","components/todoTask/taskColumn.jsx","components/todoTask/listTask.jsx","components/todoTask/initialData.js","components/todoTask/createTask.jsx","components/todoTask/updateTask.jsx","utils/getKeyByValue.js","utils/getValueByKey.js","utils/constant.js","utils/metacontent.js","components/todoTask/showTask.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","update","draggableId","type","reason","source","droppableId","index","destination","TaskContext","createContext","Container","styled","div","Task","props","this","task","id","toString","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","onClick","context","editTask","Grid","item","xs","description","Button","color","e","deleteTask","React","Component","contextType","Title","h3","TaskList","TaskColumn","column","title","droppableProps","tasks","map","key","Math","random","placeholder","ListTask","taskDetail","state","onDragEnd","onDragUpdate","columnsort","columnId","columns","taskIds","taskId","taskStatus","Completed","H4","CreateTask","error","onSubmit","addTask","container","TextField","label","name","multiline","value","helperText","fullWidth","rows","onChange","handleChange","UpdateTask","updateTask","getKeyByValue","object","prop","hasOwnProperty","getValueByKey","parseInt","getMetaContent","metas","document","getElementsByTagName","i","length","getAttribute","ShowTask","status","isLoading","newRecord","createTaskObject","taskValue","findIndex","push","fetchTodos","fetch","then","response","json","todos","setState","event","preventDefault","taskData","todo","authenticity_token","method","body","JSON","stringify","headers","Accept","console","log","ok","catch","errorState","text","errorMessage","Object","entries","parse","forEach","taskid","stopPropagation","newTaskIds","deletedTaskStatus","filter","target","result","start","finish","startTaskIds","Array","from","splice","newStart","finishTaskIds","newFinish","newState","newColumn","Provider","blue","Header","App","direction","justify","alignItems","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9454233b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const start = {\n  draggableId: \"0\",\n  type: \"TYPE\",\n  reason: \"DROP\",\n  source: {\n    droppableId: \"To-Do\",\n    index: 0\n  }\n};\n\nconst update = {\n  ...start,\n  destination: {\n    droppableId: \"0\",\n    index: 1\n  }\n};\nconst result = {\n  ...update,\n  reason: \"DROP\"\n};\n","import { createContext } from \"react\";\n\nexport const TaskContext = createContext();\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { TaskContext } from \"../../context/taskContext.js\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst Container = styled.div`\n  padding: 8px;\n  margin-bottom: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  display: flex;\n  &:hover {\n    background: #9c27b0;\n    color: white;\n    cursor: pointer;\n  }\n  &:active {\n    background: #9c27b0;\n    color: white;\n  }\n`;\n\nexport default class Task extends React.Component {\n  static contextType = TaskContext;\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Draggable\n        index={this.props.index}\n        draggableId={this.props.task.id.toString()}\n      >\n        {(provided, snapshot) => {\n          return (\n            <Container\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              ref={provided.innerRef}\n              onClick={() => this.context.editTask(this.props.task.id)}\n            >\n              <Grid item xs={10}>\n                {this.props.task.description}\n              </Grid>\n              <Grid item xs={2}>\n                <Button color=\"secondary\">\n                  <DeleteIcon\n                    onClick={e =>\n                      this.context.deleteTask(this.props.task.id, e)\n                    }\n                  />\n                </Button>\n              </Grid>\n            </Container>\n          );\n        }}\n      </Draggable>\n    );\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Task from \"./task\";\nimport { Droppable } from \"react-beautiful-dnd\";\n\nconst Container = styled.div`\n  margin: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  /* background: 'white'; */\n`;\nconst Title = styled.h3`\n  padding: 8px;\n  text-align: \"center\";\n`;\nconst TaskList = styled.div`\n  padding: 8px;\n  flex-grow: 1;\n`;\nexport default class TaskColumn extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Title>{this.props.column.title}</Title>\n        <Droppable droppableId={this.props.column.id}>\n          {provided => (\n            <TaskList ref={provided.innerRef} {...provided.droppableProps}>\n              {this.props.tasks.map((task, index) => (\n                <Task\n                  key={Math.random().toString()}\n                  index={index}\n                  task={task}\n                />\n              ))}\n              {provided.placeholder}\n            </TaskList>\n          )}\n        </Droppable>\n      </Container>\n    );\n  }\n}\n","import result from \"./dragEndResult.js\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport Column from \"./taskColumn.jsx\";\nimport { TaskContext } from \"../../context/taskContext.js\";\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n`;\nexport default class ListTask extends React.Component {\n  static contextType = TaskContext;\n\n  render() {\n    const { taskDetail } = this.context.state;\n    return (\n      <DragDropContext\n        onDragEnd={this.context.onDragEnd}\n        onDragUpdate={this.context.onDragUpdate}\n      >\n        <Container>\n          {taskDetail.columnsort.map(columnId => {\n            const column = taskDetail.columns[columnId];\n            const tasks = column.taskIds.map(\n              taskId => taskDetail.tasks[taskId]\n            );\n            return <Column key={column.id} column={column} tasks={tasks} />;\n          })}\n        </Container>\n      </DragDropContext>\n    );\n  }\n}\n","var taskStatus = {\n  tasks: {},\n  columns: {\n    \"To-Do\": {\n      id: \"To-Do\",\n      title: \"To-Do\",\n      taskIds: []\n    },\n    \"In-Progress\": {\n      id: \"In-Progress\",\n      title: \"In-Progress\",\n      taskIds: []\n    },\n    Completed: {\n      id: \"Completed\",\n      title: \"Completed\",\n      taskIds: []\n    }\n  },\n  columnsort: [\"To-Do\", \"In-Progress\", \"Completed\"]\n};\nexport default taskStatus;\n","import React from \"react\";\nimport { TextField, Grid, Button, InputLabel } from \"@material-ui/core\";\nimport taskDetail from \"./initialData.js\";\nimport { TaskContext } from \"../../context/taskContext.js\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  padding: 8px;\n  margin-bottom: 8px;\n  width: 800px;\n  display: flex;\n`;\nconst H4 = styled.div`\n  font-size: 20px;\n  color: #931078;\n`;\nexport default class CreateTask extends React.Component {\n  static contextType = TaskContext;\n\n  render() {\n    const { description, error } = this.context.state;\n    return (\n      <form onSubmit={e => this.context.addTask(e)}>\n        <Container>\n          <Grid container>\n            <Grid item xs={12}>\n              <H4> Create Task </H4>\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                id=\"description\"\n                error={this.context.state.error[\"description\"]}\n                label=\"Task Description\"\n                name=\"description\"\n                multiline={false}\n                value={description}\n                helperText={this.context.state.error[\"message\"]}\n                fullWidth\n                rows=\"1\"\n                onChange={e => this.context.handleChange(e)}\n              />\n            </Grid>\n          </Grid>\n        </Container>\n      </form>\n    );\n  }\n}\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport taskDetail from \"./initialData.js\";\nimport { TaskContext } from \"../../context/taskContext.js\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  padding: 8px;\n  margin-bottom: 8px;\n  width: 800px;\n  display: flex;\n`;\nconst H4 = styled.div`\n  font-size: 20px;\n  color: #931078;\n`;\nexport default class UpdateTask extends React.Component {\n  static contextType = TaskContext;\n\n  render() {\n    const { description, error } = this.context.state;\n    return (\n      <form onSubmit={e => this.context.updateTask(e)}>\n        <Container>\n          <Grid container>\n            <Grid item xs={12}>\n              <H4> Update Task </H4>\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                id=\"description\"\n                error={this.context.state.error[\"description\"]}\n                label=\"Task Description\"\n                name=\"description\"\n                multiline={false}\n                value={description}\n                helperText={this.context.state.error[\"message\"]}\n                rows=\"1\"\n                fullWidth\n                onChange={e => this.context.handleChange(e)}\n              />\n            </Grid>\n          </Grid>\n        </Container>\n      </form>\n    );\n  }\n}\n","export const getKeyByValue = (object, value) => {\n  for (var prop in object) {\n    if (object.hasOwnProperty(prop)) {\n      if (object[prop] === value) return prop;\n    }\n  }\n};\n","export const getValueByKey = (object, value) => {\n  for (var prop in object) {\n    if (object.hasOwnProperty(prop)) {\n      if (parseInt(prop) === parseInt(value)) {\n        return object[prop];\n      }\n    }\n  }\n};\n","export const taskStatus = [\"To-Do\", \"In-Progress\", \"Completed\"];\n","export const  getMetaContent = (name) => {\n    var metas = document.getElementsByTagName('meta');\n    for (var i=0; i<metas.length; i++) {\n      if (metas[i].getAttribute(\"name\") == name) {\n        return metas[i].getAttribute(\"content\");\n      }\n    }\n    return \"\";\n  };\n","import { TaskContext } from \"../../context/taskContext.js\";\nimport TodoTask from \"./listTask.jsx\";\nimport CreateTask from \"./createTask.jsx\";\nimport UpdateTask from \"./updateTask.jsx\";\n\nimport React from \"react\";\nimport taskDetail from \"./initialData.js\";\nimport { getKeyByValue } from \"../../utils/getKeyByValue.js\";\nimport { getValueByKey } from \"../../utils/getValueByKey.js\";\nimport { taskStatus } from \"../../utils/constant.js\";\nimport { getMetaContent } from \"../../utils/metacontent.js\";\n\nexport default class ShowTask extends React.Component {\n  state = {\n    taskDetail: taskDetail,\n    description: \"\",\n    status: getKeyByValue(taskStatus, \"To-Do\"),\n    error: {},\n    isLoading: false,\n    newRecord: true,\n    id: \"\"\n  };\n  componentDidMount() {\n    this.fetchTodos();\n  }\n  createTaskObject = taskValue => {\n    let taskId = taskValue.id.toString();\n    let taskDetail = this.state.taskDetail;\n    taskDetail.tasks[taskId] = taskValue;\n    let taskIdIndex = taskDetail.columns[\n      getValueByKey(taskStatus, taskValue.status)\n    ].taskIds.findIndex(task => task == taskValue.id);\n    if (taskIdIndex == -1) {\n      taskDetail.columns[\n        getValueByKey(taskStatus, taskValue.status)\n      ].taskIds.push(taskValue.id);\n    }\n    return taskDetail;\n  };\n  fetchTodos = () => {\n    fetch(\"/todos\")\n      .then(response => response.json())\n      .then(todos => {\n        let taskDetail;\n        todos.map((value, key) => {\n          taskDetail = this.createTaskObject(value);\n        });\n        this.setState({ ...taskDetail, isLoading: true });\n      });\n  };\n  addTask = event => {\n    event.preventDefault();\n    try {\n      var taskData = {\n        todo: {\n          description: this.state.description,\n          status: this.state.status\n        },\n        authenticity_token: getMetaContent(\"csrf-token\")\n      };\n      fetch(\"/todos\", {\n        method: \"post\",\n        body: JSON.stringify(taskData),\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(response => {\n          console.log(response);\n          if (!response.ok) {\n            throw response;\n          }\n          return response.json(); //we only get here if there is no error\n        })\n        .then(response => {\n          let taskDetail = this.createTaskObject(response);\n          this.setState({\n            description: \"\",\n            status: getKeyByValue(taskStatus, \"To-Do\"),\n            taskDetail: taskDetail,\n            error: {}\n          });\n        })\n        .catch(error => {\n          let errorState = {};\n          errorState[\"message\"] = \"\";\n          error.text().then(errorMessage => {\n            let errorList = Object.entries(JSON.parse(errorMessage));\n            errorList.forEach(([key, value]) => {\n              errorState[key] = true;\n              if (errorState[\"message\"] === \"\") {\n                errorState[\"message\"] = value[0];\n              }\n            });\n            this.setState({ error: errorState });\n          });\n        });\n    } catch (error) {\n      // console.log(error);\n    }\n  };\n  editTask = taskid => {\n    fetch(`/todos/${taskid}`)\n      .then(response => response.json())\n      .then(todos => {\n        this.setState({\n          description: todos.description,\n          id: taskid,\n          newRecord: false\n        });\n      });\n  };\n  updateTask = event => {\n    event.preventDefault();\n    var taskData = {\n      todo: {\n        description: this.state.description\n      },\n      authenticity_token: getMetaContent(\"csrf-token\")\n    };\n    fetch(`/todos/${this.state.id}`, {\n      method: \"put\",\n      body: JSON.stringify(taskData),\n      headers: { \"Content-Type\": \"application/json\" }\n    })\n      .then(response => {\n        if (!response.ok) {\n          throw response;\n        }\n        return response.json(); //we only get here if there is no error\n      })\n      .then(response => {\n        let taskDetail = this.createTaskObject(response);\n        this.setState({\n          description: \"\",\n          status: getKeyByValue(taskStatus, \"To-Do\"),\n          taskDetail,\n          newRecord: true,\n          error: {}\n        });\n      })\n      .catch(error => {\n        let errorState = {};\n        errorState[\"message\"] = \"\";\n        error.text().then(errorMessage => {\n          let errorList = Object.entries(JSON.parse(errorMessage));\n          errorList.forEach(([key, value]) => {\n            errorState[key] = true;\n            if (errorState[\"message\"] == \"\") {\n              errorState[\"message\"] = value[0];\n            }\n          });\n          this.setState({ error: errorState });\n        });\n      });\n  };\n  deleteTask = (taskId, event) => {\n    event.stopPropagation();\n    fetch(`/todos/${taskId}`, { method: \"delete\" }).then(response => {\n      let taskDetail = this.state.taskDetail;\n      let deletedTaskStatus = taskDetail.tasks[taskId].status;\n      let taskIds =\n        taskDetail.columns[getValueByKey(taskStatus, deletedTaskStatus)]\n          .taskIds;\n      let newTaskIds;\n      newTaskIds = taskIds.filter(id => {\n        return id != taskId;\n      });\n      delete taskDetail.tasks[taskId];\n      taskDetail.columns[\n        getValueByKey(taskStatus, deletedTaskStatus)\n      ].taskIds = newTaskIds;\n      this.setState({ ...taskDetail });\n    });\n  };\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  onDragEnd = result => {\n    const { destination, source, draggableId } = result;\n    if (!destination) {\n      return;\n    }\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n    const start = this.state.taskDetail.columns[source.droppableId];\n    const finish = this.state.taskDetail.columns[destination.droppableId];\n    if (start === finish) {\n      const newTaskIds = Array.from(start.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n      const newColumn = {\n        ...start,\n        taskIds: newTaskIds\n      };\n      const newState = {\n        ...this.state.taskDetail,\n        columns: {\n          ...this.state.taskDetail.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      this.setState({ taskDetail: newState });\n      return;\n    }\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds\n    };\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds\n    };\n    const newState = {\n      ...this.state.taskDetail,\n      columns: {\n        ...this.state.taskDetail.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    };\n    newState.tasks[draggableId].status = getKeyByValue(\n      taskStatus,\n      destination.droppableId\n    );\n    try {\n      var taskData = {\n        todo: {\n          status: getKeyByValue(taskStatus, destination.droppableId)\n        },\n        authenticity_token: getMetaContent(\"csrf-token\")\n      };\n      fetch(`/todos/${draggableId}`, {\n        method: \"put\",\n        body: JSON.stringify(taskData),\n        headers: { \"Content-Type\": \"application/json\" }\n      })\n        .then(response => {\n          if (!response.ok) {\n            throw response;\n          }\n          return response.json(); //we only get here if there is no error\n        })\n        .then(response => {\n          // this.fetchTodos();\n          this.setState({ taskDetail: newState });\n        })\n        .catch(error => {\n          let errorState = {};\n          errorState[\"message\"] = \"\";\n          error.text().then(errorMessage => {\n            let errorList = Object.entries(JSON.parse(errorMessage));\n            errorList.forEach(([key, value]) => {\n              errorState[key] = true;\n              if (errorState[\"message\"] == \"\") {\n                errorState[\"message\"] = value[0];\n              }\n            });\n            this.setState({ error: errorState });\n          });\n        });\n    } catch (error) {}\n  };\n  render() {\n    const { isLoading, id, newRecord, error } = this.state;\n    console.log(error);\n    if (isLoading) {\n      return (\n        <TaskContext.Provider\n          value={{\n            state: this.state,\n            addTask: this.addTask,\n            handleChange: this.handleChange,\n            onDragEnd: this.onDragEnd,\n            editTask: this.editTask,\n            updateTask: this.updateTask,\n            deleteTask: this.deleteTask\n          }}\n        >\n          {newRecord === true ? <CreateTask /> : <UpdateTask id={id} />}\n          <TodoTask />\n        </TaskContext.Provider>\n      );\n    } else {\n      return <div></div>;\n    }\n  }\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Grid from \"@material-ui/core/Grid\";\nimport blue from \"@material-ui/core/colors/blue\";\nimport ShowTask from \"./components/todoTask/showTask.jsx\";\n\nimport styled from \"styled-components\";\nconst primary = blue[900]; // #F44336\nconst Header = styled.div`\n  padding: 15px 0px;\n  color: white;\n  font-size: 24px;\n  background: #931078;\n  width: 100%;\n`;\nfunction App() {\n  return (\n    <div>\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n        <Header>To-Do Tasks</Header>\n      </Grid>\n      <Grid container justify=\"center\">\n        <ShowTask />\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport TodoTask from \"./components/todoTask/listTask.jsx\";\nimport CreateTask from \"./components/todoTask/createTask.jsx\";\nimport App from \"./App.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}