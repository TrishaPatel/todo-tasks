{"ast":null,"code":"var _jsxFileName = \"/home/trisha/trisha/todo-tasks/client/src/components/todoTask/showTask.jsx\";\nimport { TaskContext } from \"../../context/taskContext.js\";\nimport TodoTask from \"./listTask.jsx\";\nimport CreateTask from \"./createTask.jsx\";\nimport UpdateTask from \"./updateTask.jsx\";\nimport React from \"react\";\nimport taskDetail from \"./initialData.js\";\nimport { getKeyByValue } from \"../../utils/getKeyByValue.js\";\nimport { getValueByKey } from \"../../utils/getValueByKey.js\";\nimport { taskStatus } from \"../../utils/constant.js\";\nimport { getMetaContent } from \"../../utils/metacontent.js\";\nexport default class ShowTask extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      taskDetail: taskDetail,\n      description: \"\",\n      status: getKeyByValue(taskStatus, \"To-Do\"),\n      error: {},\n      isLoading: false,\n      newRecord: true,\n      id: \"\"\n    };\n\n    this.createTaskObject = taskValue => {\n      let taskId = taskValue.id.toString();\n      let taskDetail = this.state.taskDetail;\n      taskDetail.tasks[taskId] = taskValue;\n      let taskIdIndex = taskDetail.columns[getValueByKey(taskStatus, taskValue.status)].taskIds.findIndex(task => task == taskValue.id);\n\n      if (taskIdIndex == -1) {\n        taskDetail.columns[getValueByKey(taskStatus, taskValue.status)].taskIds.push(taskValue.id);\n      }\n\n      return taskDetail;\n    };\n\n    this.fetchTodos = () => {\n      fetch(\"/todos\").then(response => response.json()).then(todos => {\n        let taskDetail;\n        todos.map((value, key) => {\n          taskDetail = this.createTaskObject(value);\n        });\n        this.setState({ ...taskDetail,\n          isLoading: true\n        });\n      });\n    };\n\n    this.addTask = event => {\n      event.preventDefault();\n\n      try {\n        var taskData = {\n          todo: {\n            description: this.state.description,\n            status: this.state.status\n          },\n          authenticity_token: getMetaContent(\"csrf-token\")\n        };\n        fetch(\"/todos\", {\n          method: \"post\",\n          body: JSON.stringify(taskData),\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(response => {\n          console.log(response);\n\n          if (!response.ok) {\n            throw response;\n          }\n\n          return response.json(); //we only get here if there is no error\n        }).then(response => {\n          let taskDetail = this.createTaskObject(response);\n          this.setState({\n            description: \"\",\n            status: getKeyByValue(taskStatus, \"To-Do\"),\n            taskDetail: taskDetail\n          });\n        }).catch(error => {\n          let errorState = {};\n          errorState[\"message\"] = \"\";\n          error.text().then(errorMessage => {\n            let errorList = Object.entries(JSON.parse(errorMessage));\n            errorList.forEach(([key, value]) => {\n              errorState[key] = true;\n\n              if (errorState[\"message\"] === \"\") {\n                errorState[\"message\"] = value[0];\n              }\n            });\n            this.setState({\n              error: errorState\n            });\n          });\n        });\n      } catch (error) {// console.log(error);\n      }\n    };\n\n    this.editTask = taskid => {\n      fetch(`/todos/${taskid}`).then(response => response.json()).then(todos => {\n        this.setState({\n          description: todos.description,\n          id: taskid,\n          newRecord: false\n        });\n      });\n    };\n\n    this.updateTask = event => {\n      event.preventDefault();\n      var taskData = {\n        todo: {\n          description: this.state.description\n        },\n        authenticity_token: getMetaContent(\"csrf-token\")\n      };\n      fetch(`/todos/${this.state.id}`, {\n        method: \"put\",\n        body: JSON.stringify(taskData),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        if (!response.ok) {\n          throw response;\n        }\n\n        return response.json(); //we only get here if there is no error\n      }).then(response => {\n        let taskDetail = this.createTaskObject(response);\n        this.setState({\n          description: \"\",\n          status: getKeyByValue(taskStatus, \"To-Do\"),\n          taskDetail,\n          newRecord: true\n        });\n      }).catch(error => {\n        let errorState = {};\n        errorState[\"message\"] = \"\";\n        error.text().then(errorMessage => {\n          let errorList = Object.entries(JSON.parse(errorMessage));\n          errorList.forEach(([key, value]) => {\n            errorState[key] = true;\n\n            if (errorState[\"message\"] == \"\") {\n              errorState[\"message\"] = value[0];\n            }\n          });\n          this.setState({\n            error: errorState\n          });\n        });\n      });\n    };\n\n    this.deleteTask = (taskId, event) => {\n      event.stopPropagation();\n      fetch(`/todos/${taskId}`, {\n        method: \"delete\"\n      }).then(response => {\n        let taskDetail = this.state.taskDetail;\n        let deletedTaskStatus = taskDetail.tasks[taskId].status;\n        console.log(deletedTaskStatus);\n        console.log(taskDetail.columns[getValueByKey(taskStatus, deletedTaskStatus)].taskIds.remove(taskIds));\n        delete taskDetail.tasks[taskId];\n        delete taskDetail.columns[getValueByKey(taskStatus, deletedTaskStatus)].taskIds[taskId];\n        console.log(taskDetail); // this.setState({ ...taskDetail });\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onDragEnd = result => {\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      const start = this.state.taskDetail.columns[source.droppableId];\n      const finish = this.state.taskDetail.columns[destination.droppableId];\n\n      if (start === finish) {\n        const newTaskIds = Array.from(start.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n        const newColumn = { ...start,\n          taskIds: newTaskIds\n        };\n        const newState = { ...this.state.taskDetail,\n          columns: { ...this.state.taskDetail.columns,\n            [newColumn.id]: newColumn\n          }\n        };\n        this.setState({\n          taskDetail: newState\n        });\n        return;\n      }\n\n      const startTaskIds = Array.from(start.taskIds);\n      startTaskIds.splice(source.index, 1);\n      const newStart = { ...start,\n        taskIds: startTaskIds\n      };\n      const finishTaskIds = Array.from(finish.taskIds);\n      finishTaskIds.splice(destination.index, 0, draggableId);\n      const newFinish = { ...finish,\n        taskIds: finishTaskIds\n      };\n      const newState = { ...this.state.taskDetail,\n        columns: { ...this.state.taskDetail.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      };\n\n      try {\n        var taskData = {\n          todo: {\n            status: getKeyByValue(taskStatus, destination.droppableId)\n          },\n          authenticity_token: getMetaContent(\"csrf-token\")\n        };\n        fetch(`/todos/${draggableId}`, {\n          method: \"put\",\n          body: JSON.stringify(taskData),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(response => {\n          if (!response.ok) {\n            throw response;\n          }\n\n          return response.json(); //we only get here if there is no error\n        }).then(response => {\n          this.setState({\n            taskDetail: newState\n          });\n        }).catch(error => {\n          let errorState = {};\n          errorState[\"message\"] = \"\";\n          error.text().then(errorMessage => {\n            let errorList = Object.entries(JSON.parse(errorMessage));\n            errorList.forEach(([key, value]) => {\n              errorState[key] = true;\n\n              if (errorState[\"message\"] == \"\") {\n                errorState[\"message\"] = value[0];\n              }\n            });\n            this.setState({\n              error: errorState\n            });\n          });\n        });\n      } catch (error) {}\n    };\n  }\n\n  componentDidMount() {\n    this.fetchTodos();\n  }\n\n  render() {\n    const {\n      isLoading,\n      id,\n      newRecord,\n      error\n    } = this.state;\n    console.log(error);\n\n    if (isLoading) {\n      return /*#__PURE__*/React.createElement(TaskContext.Provider, {\n        value: {\n          state: this.state,\n          addTask: this.addTask,\n          handleChange: this.handleChange,\n          onDragEnd: this.onDragEnd,\n          editTask: this.editTask,\n          updateTask: this.updateTask,\n          deleteTask: this.deleteTask\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 9\n        }\n      }, newRecord === true ? /*#__PURE__*/React.createElement(CreateTask, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(UpdateTask, {\n        id: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 50\n        }\n      }), /*#__PURE__*/React.createElement(TodoTask, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 14\n        }\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/trisha/trisha/todo-tasks/client/src/components/todoTask/showTask.jsx"],"names":["TaskContext","TodoTask","CreateTask","UpdateTask","React","taskDetail","getKeyByValue","getValueByKey","taskStatus","getMetaContent","ShowTask","Component","state","description","status","error","isLoading","newRecord","id","createTaskObject","taskValue","taskId","toString","tasks","taskIdIndex","columns","taskIds","findIndex","task","push","fetchTodos","fetch","then","response","json","todos","map","value","key","setState","addTask","event","preventDefault","taskData","todo","authenticity_token","method","body","JSON","stringify","headers","Accept","console","log","ok","catch","errorState","text","errorMessage","errorList","Object","entries","parse","forEach","editTask","taskid","updateTask","deleteTask","stopPropagation","deletedTaskStatus","remove","handleChange","target","name","onDragEnd","result","destination","source","draggableId","droppableId","index","start","finish","newTaskIds","Array","from","splice","newColumn","newState","startTaskIds","newStart","finishTaskIds","newFinish","componentDidMount","render"],"mappings":"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","sourcesContent":["import { TaskContext } from \"../../context/taskContext.js\";\nimport TodoTask from \"./listTask.jsx\";\nimport CreateTask from \"./createTask.jsx\";\nimport UpdateTask from \"./updateTask.jsx\";\n\nimport React from \"react\";\nimport taskDetail from \"./initialData.js\";\nimport { getKeyByValue } from \"../../utils/getKeyByValue.js\";\nimport { getValueByKey } from \"../../utils/getValueByKey.js\";\nimport { taskStatus } from \"../../utils/constant.js\";\nimport { getMetaContent } from \"../../utils/metacontent.js\";\n\nexport default class ShowTask extends React.Component {\n  state = {\n    taskDetail: taskDetail,\n    description: \"\",\n    status: getKeyByValue(taskStatus, \"To-Do\"),\n    error: {},\n    isLoading: false,\n    newRecord: true,\n    id: \"\"\n  };\n  componentDidMount() {\n    this.fetchTodos();\n  }\n  createTaskObject = taskValue => {\n    let taskId = taskValue.id.toString();\n    let taskDetail = this.state.taskDetail;\n    taskDetail.tasks[taskId] = taskValue;\n    let taskIdIndex = taskDetail.columns[\n      getValueByKey(taskStatus, taskValue.status)\n    ].taskIds.findIndex(task => task == taskValue.id);\n    if (taskIdIndex == -1) {\n      taskDetail.columns[\n        getValueByKey(taskStatus, taskValue.status)\n      ].taskIds.push(taskValue.id);\n    }\n    return taskDetail;\n  };\n  fetchTodos = () => {\n    fetch(\"/todos\")\n      .then(response => response.json())\n      .then(todos => {\n        let taskDetail;\n        todos.map((value, key) => {\n          taskDetail = this.createTaskObject(value);\n        });\n        this.setState({ ...taskDetail, isLoading: true });\n      });\n  };\n  addTask = event => {\n    event.preventDefault();\n    try {\n      var taskData = {\n        todo: {\n          description: this.state.description,\n          status: this.state.status\n        },\n        authenticity_token: getMetaContent(\"csrf-token\")\n      };\n      fetch(\"/todos\", {\n        method: \"post\",\n        body: JSON.stringify(taskData),\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(response => {\n          console.log(response);\n          if (!response.ok) {\n            throw response;\n          }\n          return response.json(); //we only get here if there is no error\n        })\n        .then(response => {\n          let taskDetail = this.createTaskObject(response);\n          this.setState({\n            description: \"\",\n            status: getKeyByValue(taskStatus, \"To-Do\"),\n            taskDetail: taskDetail\n          });\n        })\n        .catch(error => {\n          let errorState = {};\n          errorState[\"message\"] = \"\";\n          error.text().then(errorMessage => {\n            let errorList = Object.entries(JSON.parse(errorMessage));\n            errorList.forEach(([key, value]) => {\n              errorState[key] = true;\n              if (errorState[\"message\"] === \"\") {\n                errorState[\"message\"] = value[0];\n              }\n            });\n            this.setState({ error: errorState });\n          });\n        });\n    } catch (error) {\n      // console.log(error);\n    }\n  };\n  editTask = taskid => {\n    fetch(`/todos/${taskid}`)\n      .then(response => response.json())\n      .then(todos => {\n        this.setState({\n          description: todos.description,\n          id: taskid,\n          newRecord: false\n        });\n      });\n  };\n  updateTask = event => {\n    event.preventDefault();\n    var taskData = {\n      todo: {\n        description: this.state.description\n      },\n      authenticity_token: getMetaContent(\"csrf-token\")\n    };\n    fetch(`/todos/${this.state.id}`, {\n      method: \"put\",\n      body: JSON.stringify(taskData),\n      headers: { \"Content-Type\": \"application/json\" }\n    })\n      .then(response => {\n        if (!response.ok) {\n          throw response;\n        }\n        return response.json(); //we only get here if there is no error\n      })\n      .then(response => {\n        let taskDetail = this.createTaskObject(response);\n        this.setState({\n          description: \"\",\n          status: getKeyByValue(taskStatus, \"To-Do\"),\n          taskDetail,\n          newRecord: true\n        });\n      })\n      .catch(error => {\n        let errorState = {};\n        errorState[\"message\"] = \"\";\n        error.text().then(errorMessage => {\n          let errorList = Object.entries(JSON.parse(errorMessage));\n          errorList.forEach(([key, value]) => {\n            errorState[key] = true;\n            if (errorState[\"message\"] == \"\") {\n              errorState[\"message\"] = value[0];\n            }\n          });\n          this.setState({ error: errorState });\n        });\n      });\n  };\n  deleteTask = (taskId, event) => {\n    event.stopPropagation();\n    fetch(`/todos/${taskId}`, { method: \"delete\" }).then(response => {\n      let taskDetail = this.state.taskDetail;\n      let deletedTaskStatus = taskDetail.tasks[taskId].status;\n      console.log(deletedTaskStatus);\n      console.log(\n        taskDetail.columns[\n          getValueByKey(taskStatus, deletedTaskStatus)\n        ].taskIds.remove(taskIds)\n      );\n      delete taskDetail.tasks[taskId];\n      delete taskDetail.columns[getValueByKey(taskStatus, deletedTaskStatus)]\n        .taskIds[taskId];\n      console.log(taskDetail);\n      // this.setState({ ...taskDetail });\n    });\n  };\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  onDragEnd = result => {\n    const { destination, source, draggableId } = result;\n    if (!destination) {\n      return;\n    }\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n    const start = this.state.taskDetail.columns[source.droppableId];\n    const finish = this.state.taskDetail.columns[destination.droppableId];\n    if (start === finish) {\n      const newTaskIds = Array.from(start.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n      const newColumn = {\n        ...start,\n        taskIds: newTaskIds\n      };\n      const newState = {\n        ...this.state.taskDetail,\n        columns: {\n          ...this.state.taskDetail.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      this.setState({ taskDetail: newState });\n      return;\n    }\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds\n    };\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds\n    };\n    const newState = {\n      ...this.state.taskDetail,\n      columns: {\n        ...this.state.taskDetail.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    };\n    try {\n      var taskData = {\n        todo: {\n          status: getKeyByValue(taskStatus, destination.droppableId)\n        },\n        authenticity_token: getMetaContent(\"csrf-token\")\n      };\n      fetch(`/todos/${draggableId}`, {\n        method: \"put\",\n        body: JSON.stringify(taskData),\n        headers: { \"Content-Type\": \"application/json\" }\n      })\n        .then(response => {\n          if (!response.ok) {\n            throw response;\n          }\n          return response.json(); //we only get here if there is no error\n        })\n        .then(response => {\n          this.setState({ taskDetail: newState });\n        })\n        .catch(error => {\n          let errorState = {};\n          errorState[\"message\"] = \"\";\n          error.text().then(errorMessage => {\n            let errorList = Object.entries(JSON.parse(errorMessage));\n            errorList.forEach(([key, value]) => {\n              errorState[key] = true;\n              if (errorState[\"message\"] == \"\") {\n                errorState[\"message\"] = value[0];\n              }\n            });\n            this.setState({ error: errorState });\n          });\n        });\n    } catch (error) {}\n  };\n  render() {\n    const { isLoading, id, newRecord, error } = this.state;\n    console.log(error);\n    if (isLoading) {\n      return (\n        <TaskContext.Provider\n          value={{\n            state: this.state,\n            addTask: this.addTask,\n            handleChange: this.handleChange,\n            onDragEnd: this.onDragEnd,\n            editTask: this.editTask,\n            updateTask: this.updateTask,\n            deleteTask: this.deleteTask\n          }}\n        >\n          {newRecord === true ? <CreateTask /> : <UpdateTask id={id} />}\n          <TodoTask />\n        </TaskContext.Provider>\n      );\n    } else {\n      return <div></div>;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}